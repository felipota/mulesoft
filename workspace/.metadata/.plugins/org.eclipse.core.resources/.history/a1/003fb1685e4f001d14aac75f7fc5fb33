<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="post-products-suite.xml" />
	<munit:test name="sf-post-products-publish-test" doc:id="733a41b0-3c73-40ef-8a8a-fbacccf70b81" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Publish" doc:id="125cc8b7-689b-4343-a048-3fdb11b6beb8" processor="anypoint-mq:publish">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="c13ada51-9dd0-48a3-8e06-52dc8d3e5525" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload value="#[readUrl('classpath://sfpostproductspublishmocktest\mock_payload.dwl')]" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://sfpostproductspublishmocktest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://sfpostproductspublishmocktest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="248309ab-8db8-48a2-9365-3630b197a35c" >
				<munit:payload value="#[output application/json  --- readUrl('classpath://sfpostproductspublishtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json " />
				<munit:attributes value="#[readUrl('classpath://sfpostproductspublishtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://sfpostproductspublishtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to sf-post-products-publish" doc:id="bbd3171b-ab33-4c97-8a2b-ff339e12cd47" name="sf-post-products-publish"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="ab9fe9d6-2ccd-473f-8374-fb99be80b976" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import sfpostproductspublishtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify Publish" doc:id="b644260e-f06e-4525-8248-68d47f2d06e1" processor="anypoint-mq:publish" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="c13ada51-9dd0-48a3-8e06-52dc8d3e5525" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="mf-post-products-channel-test" doc:id="2af3f710-f35a-4b03-8ab1-896f66a90c00" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Request mongoDB" doc:id="ed68fc5e-29f2-49cf-9e8b-9f13316e1e7b" processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="fc56dd8d-a5d8-493e-9c5e-0045afa7becb" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload value="#[output application/json  --- readUrl('classpath://sfmongodbclientproductsposttest\mock_payload.dwl')]" mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://sfmongodbclientproductsposttest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="notification" value="#[output application/java --- readUrl('classpath://sfmongodbclientproductsposttest\mock_variable_.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Request elastic search" doc:id="0fb611e3-7981-4a23-808a-d9fb1ac73164" processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="082986e3-a75b-4471-99b3-a2dd818ee324" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload value="#[output application/json  --- readUrl('classpath://sfelasticsearchclientpoductsposttest\mock_payload.dwl')]" mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://sfelasticsearchclientpoductsposttest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="notification" value="#[output application/java --- readUrl('classpath://sfelasticsearchclientpoductsposttest\mock_variable_.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Request email notification" doc:id="3b3783c1-3201-4b37-b8f4-ffda60fe491d" processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="3d28999e-aec4-4bce-9932-225f08b71076" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload value="#[output application/json  --- readUrl('classpath://sfemailclientsendposttest\mock_payload.dwl')]" mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://sfemailclientsendposttest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="notification" value="#[output application/java --- readUrl('classpath://sfemailclientsendposttest\mock_variable_.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="8953fa1e-d48e-4ea9-9379-783b863f78cc" >
				<munit:payload value="#[output application/json  --- readUrl('classpath://mfpostproductschanneltest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json " />
				<munit:attributes value="#[readUrl('classpath://mfpostproductschanneltest\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to mf-post-products-channel" doc:id="f9e52aa2-e592-426e-b703-9c96be7b2c1c" name="mf-post-products-channel"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:verify-call doc:name="Verify Flow Reference to sf-mongodb-client-products-post" doc:id="e2c9038b-34bf-4c80-a4c3-7c80ddea0bc9" processor="flow-ref" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="49bd25fd-2257-45ed-b3c1-57688ea18a73" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
			<munit-tools:verify-call doc:name="Verify Flow Reference to sf-email-client-send-post" doc:id="12b97ae7-7c06-45e4-a8e4-afdcd69a2e10" processor="flow-ref" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="7cf1174c-ea28-4f90-a291-c056eaf0314f" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
			<munit-tools:verify-call doc:name="Verify Flow Reference to sf-elasticsearch-client-poducts-post" doc:id="dfecf654-85f6-426f-b8ec-58f4d6c9d51e" processor="flow-ref" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="2aeec838-3d42-4616-8d97-abe0726c8aa7" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="mf-post-products-channel-test-whitout-notification" doc:id="cb69493b-fb2b-439e-a584-134bd862b6fd" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Request mongoDB" doc:id="28336bf3-81d0-4a61-9ea2-6b14ab550c56" processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="fc56dd8d-a5d8-493e-9c5e-0045afa7becb" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload value="#[output application/json  --- readUrl('classpath://sfmongodbclientproductsposttest\mock_payload.dwl')]" mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://sfmongodbclientproductsposttest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="notification" value="#[output application/java --- readUrl('classpath://sfmongodbclientproductsposttest\mock_variable_.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Request elastic search" doc:id="87d70ada-2e48-49a7-b5c6-28707d205151" processor="http:request">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="082986e3-a75b-4471-99b3-a2dd818ee324" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload value="#[output application/json  --- readUrl('classpath://sfelasticsearchclientpoductsposttest\mock_payload.dwl')]" mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://sfelasticsearchclientpoductsposttest\mock_attributes.dwl')]" />
					<munit-tools:variables>
						<munit-tools:variable key="notification" value="#[output application/java --- readUrl('classpath://sfelasticsearchclientpoductsposttest\mock_variable_.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="11785525-74dd-46c5-98fa-fae5f88f8f5a" >
				<munit:payload value="#[output application/json  --- readUrl('classpath://mfpostproductschanneltest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json " />
				<munit:attributes value="#[readUrl('classpath://mfpostproductschanneltest\set-event_attributes2.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to mf-post-products-channel" doc:id="d70a2157-9dd6-4592-843d-9f4ce0be90e8" name="mf-post-products-channel" />
		</munit:execution>
		<munit:validation >
			<munit-tools:verify-call doc:name="Flow Reference to sf-mongodb-client-products-post" doc:id="272f2d8f-983f-4de7-99fe-6ef9f9a6ba8c" processor="flow-ref" times="1" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="49bd25fd-2257-45ed-b3c1-57688ea18a73" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
			<munit-tools:verify-call doc:name="Flow Reference to sf-email-client-send-post" doc:id="348257d7-3059-40f7-92c1-6eb4c603da09" processor="flow-ref" times="0" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="7cf1174c-ea28-4f90-a291-c056eaf0314f" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
			<munit-tools:verify-call doc:name="Verify Flow Reference to sf-elasticsearch-client-poducts-post" doc:id="031ee758-d64d-420b-8a73-68ebe54e1f31" processor="flow-ref" times="1" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="2aeec838-3d42-4616-8d97-abe0726c8aa7" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>


</mule>
